x <- 5
print(y)
y <- 1:20
t
x <- 5
R.version.string
install.packages("swirl")
library(swirl)
rm(list=ls())
library(swirl)
library(swirl)
ls()
rm(list=ls())
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555)
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,100)
corrected command
info()
corrected command
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1:20)
seq(1,20)
seq(0,10, by=0.5)
seq(5,10, length=30)
my_sew <- seq(5,10, length=30)
my_seq <- seq(5,10, length=30)
length
length()
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times - 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each - 10)
rep(c(0,1,2), each = 10)
num_vect(0.5,55,-10,6)
num_vect <- c(0.5,55,-10,6)
?`<`
tf = num_vect < 1
tf <- num_vect < 1
(TRUE, FALSE, TRUE, FALSE)
TRUE FALSE TRUE FALSE
print(tf)
tf
num_vect >=6
my_char <- c("My", "name", "is")
my_char
pste(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Anush")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep = "")
paste(1:3,c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na()
my_na <- is.na(my_data)
my_na
ma_data == NA
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y >0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf= NA)
vect
names(vect)
vect2 <- c(11,2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- [1:20]
my_vector [1:20]
my_vector <- c([1:20])
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "weight", "bp", "rating", "test")
cnames <- c("patient","age" "weight", "bp", "rating", "test")
cnames <- c("patient","age" , "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data)
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE==TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 4.9
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
library(swirl)
swirl()
swirl()
install_course_zip("path/to/file/here/swirl_courses-master.zip", multi=TRUE,
which_course="Data Analysis")
install_course_zip("~/Downloads/swirl_courses-master.zip", multi=TRUE,
which_course="Data Analysis")
getws()
getwd()
list.dirs
list.dirs()
install_course_zip("~/Documents/swirl_courses-master.zip", multi=TRUE,
which_course="Data Analysis")
install_course_zip("~/Documents/swirl_courses-master.zip", multi=TRUE, which_course="Data Analysis")
library(swirl)
install_course_zip("~/Documents/swirl_courses-master.zip", multi=TRUE, which_course="Data Analysis")
install_from_swirl("Data Analysis")
swirl()
nxt()
cars
cars$mpgCity
myMPG <- cars$mpgCity
mean(myMPG)
median(myMPG)
table(myMPG)
19
range(cars$price)
61.9-7.4
var(cars$price)
sd(cars$price)
nxt()
20
?var
a <- function(x){}
a <- function(x){ }
a <- function(x){ }
a <- function(x){ (x - y)^2}
y = 0
val <- c(-4,8)
prob <- c(0.2, 0.8)
expected <- function(x,y){ x*y}
expected(val, prob)
val <- c(-4, 1)
expected(val, prob)
expected <- function(x,y){ sum(x*y)}
expected(val, prob)
var <- function(x,y){ sum(x^2*y)}
var(val, prob)
prob <- c(.1, .2, .3, .4)
val <-2 : 5
var <- function(x,y){ sum(x^2*y - expected(val, prob))}
var(val, prob)
?qunif
qunif
qunif()
qunif(1)
qunif(0:1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
expected(x,p)
?qbeta
?qnorm
qnorm(0.93,100,10)
8*4*3*3*4
(choose(6,3) -2*choose(4,1)) * choose(8,3)
2*choose(4,1) * choose(8,3)
choose(6,5) + 2 * choose(6,4)
choose(6,5) +  choose(6,3)
choose(6,5) + choose(2,1) * choose(6,4)
choose(7,4)
choose(7,3)
choose(221, 110)
choose(4,2) * choose(3,2)
?log
log(1000000,2)
log(2,3)
14530/17500
17500* 0.7
u2 <- (0.03, 4.41, 2.05)
u2 <- (0.03,4.41,2.05)
u2 <- c(0.03,4.41,2.05)
p1 <- c(3.29, 3.44, 3.67)
p2 <- c(0.82, 9.71, 3.88)
p3 <- c(8.34, 1.72, 0.02)
a <- c(1,2,3)
b <- c(1,1,2)
a*b
sum(a*b)
sum(u2*p1)
sum(u2*p2)
sum(u2*p3)
?round
round(1/3, 2)
1/4
setwd('/Users/Anush/Desktop/R_WD/practical_ml')
library(rpart)
library(caret)
library(randomForest)
training <- read.csv('pml-training.csv')
toRemove <- c('amplitude_yaw_belt','amplitude_yaw_dumbbell','amplitude_yaw_forearm')
columns <- colnames(training)[-c(1:7,26, 101, 139, 160)]
tmp <- training[columns]
#replace all missing entries with NA
tmp[tmp == ''] <- NA
naCount <- apply(tmp,2, is.na)
naCount1<- apply(naCount,2, sum)
toRem <- names(naCount1[!(naCount1 == 0)])
tmp <- tmp[,!colnames(tmp) %in% toRem]
b<- sapply(tmp, function(x) as.numeric(as.character(x)))
preProc <- preProcess(b, method = 'pca', na.remove = TRUE,thresh = 0.8)
preprocObs<- predict(preProc, b)
table(training$classe)
modelFit <- train(training$classe ~., method = 'class', data = preprocObs)
library(rpart)
modelFit <- train(training$classe ~., method = 'class', data = preprocObs)
library(rpart)
modelFit <- train(training$classe ~., method = 'gbm', data = preprocObs)
flds <- createFolds(preprocObs, k = 10, list = TRUE, returnTrain = FALSE)
flds[1]
preprocObs[flds[1],]
preprocObs[flds[1]]
flds <- createFolds(tmp, k = 10, list = TRUE, returnTrain = FALSE)
tmp[folds[1],]
tmp[flds[1],]
flds[1]
flds
tmp
flds
flds <- createFolds(tmp, k = 10, list = TRUE, returnTrain = FALSE)
flds
flds <- createFolds(tmp[,1], k = 10, list = TRUE, returnTrain = FALSE)
flds
flds[1]
head(flds[1])
tmp[flds[1]]
tmp[flds[1],]
typeof(flds[1])
typeof(flds[[1])
typeof(flds[[1]])
flds[[1]]
tmp[flds[[1]],]
modelFit <- train(training$classe ~., method = 'rf', data = tmp[flds[[1]],])
modelFit <- train(training$classe[flds[[1]]] ~., method = 'rf', data = tmp[flds[[1]],])
ctrl <- trainControl(method = "none")
modelFit <- train(training$classe[flds[[1]]] ~., method = 'rf',
data = tmp[flds[[1]],],trControl=ctrl)
modelFit <- train(training$classe[flds[[1]]] ~., method = 'rf',
data = tmp[flds[[1]],],trControl=trainControl(method="none"))
tmp[flds[[1]],]
modelFit <- train(training$classe[flds[[1]]] ~., method = 'rf',
data = tmp[flds[[1]],],trControl=trainControl(method="none"),
tuneGrid = data.frame(.mtry = 4))
modelFit$bestTune
modelFit$terms
model1 <- rpart(classe ~ ., data=tmp, method="class")
model1 <- rpart(training$classe ~ ., data=tmp, method="class")
prediction1 <- predict(model1, tmp, type = "class")
prediction1
confusionMatrix(prediction1, training$classe)
confusionMatrix(prediction1, training$classe)['Accuracy']
confusionMatrix(prediction1, training$classe)$overall['Accuracy']
train <- tmp[flds[[i]],]
model1 <- rpart(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction1 <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction1, training$classe[flds[[i]]])$overall['Accuracy']
i = 1
train <- tmp[flds[[i]],]
model1 <- rpart(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction1 <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction1, training$classe[flds[[i]]])$overall['Accuracy']
acc
accuracy <- rep(NA, 10)
accuracy(i) <- acc
accuracy <- rep(NA, 10)
accuracy(i) <- acc
accuracy <- c()
accuracy <- c()
accuracy <- c(accuracy, acc)
accuracy
for (i in 1:10){
train <- tmp[flds[[i]],]
model1 <- rpart(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction1 <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction1, training$classe[flds[[i]]])$overall['Accuracy']
accuracy <- c(accuracy, acc)
}
accuracy
mean(accuracy)
meanAccClass <- mean(accuracy)
meanAccClass
for (i in 1:10){
train <- tmp[flds[[i]],]
model <- randomForest(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction1, training$classe[flds[[i]]])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc)
}
accuracyRF <- c()
for (i in 1:10){
train <- tmp[flds[[i]],]
model <- randomForest(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction, training$classe[flds[[i]]])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc)
}
accuracyRF
for (i in 1:10){
train <- tmp[flds[[i]],]
model <- randomForest(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction <- predict(model1, train, type = "class")
acc <- confusionMatrix(prediction1, training$classe[flds[[i]]])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc)
}
accuracyRF <- c()
for (i in 1:10){
train <- tmp[flds[[i]],]
model <- randomForest(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction <- predict(model, train, type = "class")
acc <- confusionMatrix(prediction, training$classe[flds[[i]]])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc)
}
accuracyRF
i = 1
train <- tmp[flds[[i]],]
model <- randomForest(training$classe[flds[[i]]] ~ ., data=train, method="class")
prediction <- predict(model, train, type = "class")
confusionMatrix(prediction, training$classe[flds[[i]]])
mean(accuracyRF)
testing <- read.csv('pml-testing.csv')
colnames(tmp)
colnames(testing)
cnamesTest <- c(colnames(tmp,'classe')
)
cnamesTest <- c(colnames(tmp),'classe')
cnamesTest
testing <- testing[,cnamesTest]
testing <- testing[,colnames(testing) %i% cnamesTest]
testing <- testing[,colnames(testing) %in% cnamesTest]
cnamesTest
tmp[flds[[-2]],]
tmp[flds[[2]],]
flds
flds[1]
flds <- createFolds(tmp[,1], k = 10, list = TRUE, returnTrain = FALSE)
flds
tmp[c(flds[[1]],flds[[2]]),]
i = 1
testInd <- tmp[flds[[i]],]
test_matrix = X[id==testInd, ]
test_matrix = training[id==testInd, ]
test_matrix = training[testInd, ]
str(training)
test_matrix = tmp[testInd, ]
testInd <- [flds[[i]]]
testInd <- flds[[i]]
test_matrix = tmp[testInd, ]
train <- tmp[-testInd,]
accuracy <- c()
for (i in 1:10){
testInd <- flds[[i]]
test = tmp[testInd, ]
train <- tmp[-testInd,]
model1 <- rpart(training$classe[-testInd] ~ ., data=train, method="class")
prediction1 <- predict(model1, test, type = "class")
acc <- confusionMatrix(prediction1, training$classe[testInd])$overall['Accuracy']
accuracy <- c(accuracy, acc)
}
meanAccClass <- mean(accuracy)
meanAccClass
accuracyTree <- c()
accuracyRF <- c()
for (i in 1:10){
testInd <- flds[[i]]
test = tmp[testInd, ]
train <- tmp[-testInd,]
modelTree <- rpart(training$classe[-testInd] ~ ., data=train, method="class")
predictionTree <- predict(modelTree, test, type = "class")
acc <- confusionMatrix(predictionTree, training$classe[testInd])$overall['Accuracy']
accuracyTree <- c(accuracyTree, acc)
modelRF <- randomForest(training$classe[-testInd] ~ ., data=train, method="class")
predictionRF <- predict(modelRF, test, type = "class")
acc1 <- confusionMatrix(predictionRF, training$classe[testInd])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc1)
}
for (i in 1:10){
testInd <- flds[[i]]
test = tmp[testInd, ]
train <- tmp[-testInd,]
modelTree <- rpart(training$classe[-testInd] ~ ., data=train, method="class")
predictionTree <- predict(modelTree, test, type = "class")
acc <- confusionMatrix(predictionTree, training$classe[testInd])$overall['Accuracy']
accuracyTree <- c(accuracyTree, acc)
#modelRF <- randomForest(training$classe[-testInd] ~ ., data=train, method="class")
#predictionRF <- predict(modelRF, test, type = "class")
#acc1 <- confusionMatrix(predictionRF, training$classe[testInd])$overall['Accuracy']
#accuracyRF <- c(accuracyRF, acc1)
}
accuracyTree
for (i in 1:10){
testInd <- flds[[i]]
test = tmp[testInd, ]
train <- tmp[-testInd,]
#modelTree <- rpart(training$classe[-testInd] ~ ., data=train, method="class")
#predictionTree <- predict(modelTree, test, type = "class")
#acc <- confusionMatrix(predictionTree, training$classe[testInd])$overall['Accuracy']
#accuracyTree <- c(accuracyTree, acc)
modelRF <- randomForest(training$classe[-testInd] ~ ., data=train, method="class")
predictionRF <- predict(modelRF, test, type = "class")
acc1 <- confusionMatrix(predictionRF, training$classe[testInd])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc1)
}
i = 1
modelRF <- randomForest(training$classe[-testInd] ~ ., data=train, method="class")
predictionRF <- predict(modelRF, test, type = "class")
acc1 <- confusionMatrix(predictionRF, training$classe[testInd])$overall['Accuracy']
accuracyRF <- c(accuracyRF, acc1)
accuracyRF
